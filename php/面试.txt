[数组底层原理]
底层实现是通过散列表（hash table） + 双向链表（解决hash冲突）
hashtable：将不同的关键字（key）通过映射函数计算得到散列值（Bucket->h） 从而直接索引到对应的Bucket
hash表保存当前循环的指针, 所以foreach 比for更快
Bucket：保存数组元素的key和value, 以及散列值h
如何保证有序性
散列函数和元素数组（Bucket）中间添加一层大小和存储元素数组相同的映射表。
用于存储元素在实际存储数组中的下标
元素按照映射表的先后顺序插入实际存储数组中
映射表只是原理上的思路, 实际上并不会有实际的映射表, 而是初始化的时候分配Bucket内存的同时, 还会分配相同数量的 uint32_t 大小的空间, 然后将 arData 偏移到存储元素数组的位置。
解决hash重复(php使用的链表法)：
链表法:不同关键字指向同一个单元时, 使用链表保存关键字（遍历链表匹配key）
开放寻址法：当关键字指向已经存在数据的单元的时候, 继续寻找其他单元, 直到找到可用单元（占用其他单元位置, 更容易出现hash冲突, 性能下降）
基础知识
链表：队列、栈、双向链表
链表：元素 + 指向下一元素的指针
双向链表：指向上一元素的指针 + 元素 + 指向下一元素的指针


[内存溢出解决]
1.增加内存大小
2.对大数组进行分批处理或yield处理
3.及时销毁大数组和变量
4.根据业务规则, 尽可能的少用静态变量
5.数据库操作完, 及时关闭




